#方法一：
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort()
        result = []
        new_range = ['placeholder', 0]
        i = 0
        length = len(intervals)
        while i < length:
            if (i == length - 1):
                if new_range[0] != 'placeholder':
                    new_range[1] = intervals[i][1]
                    result.append(new_range)
                else:
                    result.append(intervals[i])
                break
            for j in range(i + 1, length):
                # 下一个区间与上一个区间不重合
                if intervals[j][0] > intervals[i][1]:
                    if new_range[0] != 'placeholder':
                        result.append(new_range)
                        new_range = ['placeholder', 0]
                    else:
                        result.append(intervals[i])
                    break
                
                # 下一个区间被上一个区间全包含
                if intervals[j][1] < intervals[i][1]:
                    intervals[j]=intervals[i]
                if new_range[0] != 'placeholder':
                    new_range[1] = intervals[j][1]
                else:
                    new_range[0] = intervals[i][0]
                    new_range[1] = intervals[j][1]
                intervals[i] = new_range
            i = j
        return result
        
#方法二：
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x: x[0])

        merged = []
        for interval in intervals:
            # 如果列表为空，或者当前区间与上一区间不重合，直接添加
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                # 否则的话，我们就可以与上一区间进行合并
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged
